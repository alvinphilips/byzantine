window.SIDEBAR_ITEMS = {"attr":[["access_control","Executes the given access control method before running the decorated instruction handler. Any method in scope of the attribute can be invoked with any arguments from the associated instruction handler."],["account","An attribute for a data structure representing a Solana account."],["constant","A marker attribute used to mark const values that should be included in the generated IDL but functionally does nothing."],["error_code","Generates `Error` and `type Result<T> = Result<T, Error>` types to be used as return types from Anchor instruction handlers. Importantly, the attribute implements `From` on the `ErrorCode` to support converting from the user defined error enum into the generated `Error`."],["event","The event attribute allows a struct to be used with emit! so that programs can log significant events in their programs that clients can subscribe to. Currently, this macro is for structs only."],["interface","The `#[interface]` attribute allows one to define an external program dependency, without having any knowledge about the program, other than the fact that it implements the given trait."],["program","The `#[program]` attribute defines the module containing all instruction handlers defining all entries into a Solana program."],["state","The `#[state]` attribute defines the program’s state struct, i.e., the program’s global account singleton giving the program the illusion of state."],["zero_copy","A data structure that can be used as an internal field for a zero copy deserialized account, i.e., a struct marked with `#[account(zero_copy)]`."]],"derive":[["Accounts","Implements an `Accounts` deserializer on the given struct. Can provide further functionality through the use of attributes."],["AnchorDeserialize",""],["AnchorSerialize",""]],"enum":[["ProgramError","Reasons the program may fail"],["UpgradeableLoaderState","Upgradeable loader account states"]],"fn":[["next_account_info","Convenience function for accessing the next item in an [`AccountInfo`] iterator."]],"macro":[["declare_id","Defines the program’s ID. This should be used at the root of all Anchor based programs."],["emit","Logs an event that can be subscribed to by clients. Uses the `sol_log_data` syscall which results in the following log:"],["error","Generates an `Error::AnchorError` that includes file and line information."],["msg","Print a message to the log."]],"struct":[["AccountInfo","Account information"],["AccountMeta","Describes a single account read or written by a program during instruction execution."],["Clock","Clock represents network time.  Members of Clock start from 0 upon network boot.  The best way to map Clock to wallclock time is to use current Slot, as Epochs vary in duration (they start short and grow as the network progresses)."],["EpochSchedule",""],["Instructions",""],["ProgramData",""],["Pubkey",""],["Rent",""],["Rewards",""],["SlotHashes",""],["SlotHistory",""],["StakeHistory",""]],"trait":[["AnchorDeserialize","A data-structure that can be de-serialized from binary format by NBOR."],["AnchorSerialize","A data-structure that can be serialized into binary format by NBOR."],["SolanaSysvar",""]]};